#!/bin/bash

#     --machine virt,virtualization=true,kernel_irqchip=on,gic-version=3 \#
#     --qemu-commandline="-d unimp,guest_errors -serial mon:stdio" \

# --features acpi=off \
# --features gic.version=2 \

if [ -z "$VIRT_NAME" ]; then
    echo "VIRT_NAME: libvirt domain name: missing"
    exit 1
fi
if [ -z "$QEMU_ARCH" ]; then
    echo "QEMU_ARCH: systemn target platform: missing"
    exit 1
fi
if [ -z "$QEMU_MACH" ]; then
    echo "QEMU_MACH: systemn target machine: missing"
    exit 1
fi
if [ -z "$QEMU_CPU" ]; then
    echo "QEMU_CPU: systemn target CPU: missing"
    exit 1
fi
if [ -z "$QEMU_MEM" ]; then
    echo "QEMU_MEM: systemn target memory: missing"
    exit 1
fi
if [ -n "$QEMU_SYSCOUNT" ]; then
    if [ -z "$QEMU_DISKPATH" ]; then
	echo "QEMU_DISKPATH: systemn target disk path: missing"
	exit 1
    fi
fi

read -r -d '' QEMU <<EOF
LIBVIRT_DEBUG=1 virt-install \
    --connect qemu:///system \
    --virt-type qemu \
    -n "$VIRT_NAME" \
    --install no_install=yes \
    --noreboot \
    --osinfo detect=on,require=off \
    --arch "$QEMU_ARCH" \
    --machine "$QEMU_MACH" \
    --features acpi=off \
    --cpu "$QEMU_CPU" \
    --memory "$QEMU_MEM" \
    --graphics none \
    --network default,rom_bar=0 \
    --rng /dev/urandom \
    --clock offset=utc
EOF


if [ -n "$QEMU_KERNEL" ] && [ -n "$QEMU_INITRD" ] && [ -n "$QEMU_APPEND" ]; then
    QEMU="$QEMU --boot kernel=\"$QEMU_KERNEL\",initrd=\"$QEMU_INITRD\",kernel_args=\"$QEMU_APPEND\""
fi


if [ -n "$QEMU_SHARED" ]; then
    QEMU="$QEMU --filesystem $QEMU_SHARED"
fi
if [ -n "$QEMU_SYSCOUNT" ]; then
    # create system image drive targets
    rm -f "$QEMU_DISKPATH/sys_boot.img"
    qemu-img create -f qcow2 "$QEMU_DISKPATH/sys_boot.img" 300M
    SYSHD_DISKS="--disk $QEMU_DISKPATH/sys_boot.img "
    
    for i in $(seq 1 "${QEMU_SYSCOUNT}"); do
	rm -f "$QEMU_DISKPATH/sys_$i.img"
	qemu-img create -f qcow2 "$QEMU_DISKPATH/sys_$i.img" 1.5G
	SYSHD_DISKS="${SYSHD_DISKS}--disk $QEMU_DISKPATH/sys_$i.img "
    done
    QEMU="$QEMU $SYSHD_DISKS"
else
    QEMU="$QEMU --disk none"
fi

eval "$QEMU"
